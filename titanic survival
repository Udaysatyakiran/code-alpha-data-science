# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import joblib

# Step 1: Data Collection
titanic_data = pd.read_csv('titanic_data.csv')

# Step 2: Data Preprocessing
titanic_data.dropna(subset=['Age', 'Sex', 'Pclass'], inplace=True)
titanic_data = pd.get_dummies(titanic_data, columns=['Sex', 'Pclass'])

# Step 3: Feature Selection/Engineering
features = ['Age', 'Sex_female', 'Sex_male', 'Pclass_1', 'Pclass_2', 'Pclass_3']
X = titanic_data[features]
y = titanic_data['Survived']

# Step 4: Model Selection
model = RandomForestClassifier(random_state=42)

# Step 5: Model Training
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model.fit(X_train, y_train)

# Step 6: Model Evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Step 7: Hyperparameter Tuning
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [10, 20, 30, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}
grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, n_jobs=-1)
grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_
best_model = grid_search.best_estimator_

print("Best Parameters:", best_params)

# Step 8: Deployment
# Save the best model for deployment
joblib.dump(best_model, 'titanic_survival_prediction_model.pkl')

# Example usage: Load the saved model and predict survival for a new passenger
loaded_model = joblib.load('titanic_survival_prediction_model.pkl')
new_passenger = pd.DataFrame({'Age': [30], 'Sex_female': [0], 'Sex_male': [1], 'Pclass_1': [0], 'Pclass_2': [1], 'Pclass_3': [0]})
prediction = loaded_model.predict(new_passenger)
if prediction[0] == 1:
    print("The passenger is predicted to survive.")
else:
    print("The passenger is predicted not to survive.")
